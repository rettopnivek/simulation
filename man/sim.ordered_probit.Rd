% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R02-distribution_functions.R
\name{sim.ordered_probit}
\alias{sim.ordered_probit}
\title{Simulate From an Ordered-Probit Model}
\usage{
sim.ordered_probit(eta, tau, sigma = 1)
}
\arguments{
\item{eta}{A vector of shift parameters.}

\item{tau}{A N x (K-1) matrix of thresholds where
\code{tau[i,j] > tau[i,j-1]}.}

\item{sigma}{A vector of dispersion parameters
(greater than 0), the latent distribution's
standard deviation.}
}
\value{
A vector of integers between 1 and K.
}
\description{
Generate draws from a Ordered-Probit model (also
known as a thresholded cumulative normal model).
}
\details{
Given N observations, let \eqn{Y = y_i} be the
observed ordinal ranking for a random variable
\eqn{Y = \{1, ..., K\} }, with \eqn{i = \{1, ..., N\} }.
The ordered-probit model assumes that
\eqn{y_i} is produced via categorization of a
latent (unobservable) continuous variable,
\eqn{Z = z_i}. The distribution for the latent
variable is partitioned into \eqn{K} regions via
\eqn{K - 1} thresholds \eqn{\tau_1, ..., \tau_{K-1}}
where \eqn{\tau_j > \tau_{j-1}}. Furthermore,
we assume that \eqn{\tau_K = \infty} and
\eqn{\tau_0 = -\infty}. The region that
\eqn{z_i} falls within determines the value
of \eqn{y_i}. For example, if \eqn{z_i} is
between \eqn{\tau_1} and \eqn{\tau_2}, then
\eqn{y_i = 2}.

The ordered-probit model assumes that \eqn{Z}
follows a standard normal distribution (mean of 0
and standard devation of 1), which means:

\deqn{ P( y_i = k) = \Phi( tau_k - eta_i ) - \Phi( tau_{k-1} - eta_i ). }

Here \eqn{ \Phi(x) } is the cumulative distribution
function for the standard normal model and \eqn{\eta_i}
is a shift parameter (which can be a linear combination
of predictors and regression coefficients).
}
\examples{

# For reproducibility
set.seed( 111 )

# Number of thresholds determines
# number of ordered categories

# 2 thresholds = 3 categories
sim.ordered_probit( 0, c( -1, 1 ) )

# 4 thresholds = 5 categories
sim.ordered_probit( 0, c( -.84, -.25, .25, .84 ) )

# 2 draws
eta <- c( 0, -.25 )
tau <- rbind( c( -1, 1 ), c( -.5, .5) )
sim.ordered_probit( eta, tau )

}
